long long mod(long long val, long long m) {
  long long res = val % m;
  if (res < 0) res += m;
  return res;
}

// When the modulus p is prime we can define 
// division under mod p
// 9 /4 = 12 mod 13 since 4*12 = 48 = 9 mod 13
// basically x/y = z mod m when x = y*z mod m
// a/b = a*(1/b) mod p so we only need to compute 
// 1/b is called the mod inverse of b under mod b, i.e.
// 1/b*b = 1 mod p
// So a/b = a*b^(-1)

// a^n mod を計算する using binary search
long long modpow(long long a, long long n, long long mod) {
    long long res = 1;
    while (n > 0) {
        if (n & 1) res = res * a % mod;
        a = a * a % mod;
        n >>= 1;
    }
    return res;
}

// mod. m での a の逆元 a^{-1} を計算する
// m assumed to be prime 
// Algorithm using Fermat's little theorem
long long modinv_fermat(long long a, long long mod) {
    return modpow(a, mod - 2, mod);
}

// a^x ≡ b (mod. m) となる最小の正の整数 x を求める
// O(sqrt(m)log m)
long long modlog(long long a, long long b, int m) {
    a %= m, b %= m;

    // calc sqrt{M}
    long long lo = -1, hi = m;
    while (hi - lo > 1) {
        long long mid = (lo + hi) / 2;
        if (mid * mid >= m) hi = mid;
        else lo = mid;
    }
    long long sqrtM = hi;

    // {a^0, a^1, a^2, ..., a^sqrt(m)} 
    map<long long, long long> apow;
    long long amari = a;
    for (long long r = 1; r < sqrtM; ++r) {
        if (!apow.count(amari)) apow[amari] = r;
        (amari *= a) %= m;
    }

    // check each A^p
    long long A = modpow(modinv(a, m), sqrtM, m);
    amari = b;
    for (long long q = 0; q < sqrtM; ++q) {
        if (amari == 1 && q > 0) return q * sqrtM;
        else if (apow.count(amari)) return q * sqrtM + apow[amari];
        (amari *= A) %= m;
    }

    // no solutions
    return -1;
}

